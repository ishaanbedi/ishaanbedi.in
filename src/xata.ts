// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Posts",
    columns: [
      { name: "title", type: "string" },
      { name: "date", type: "string" },
      { name: "data", type: "text" },
      { name: "slug", type: "string" },
      { name: "views", type: "int" },
      { name: "dates", type: "datetime" },
    ],
  },
  { name: "Subscribers", columns: [{ name: "email", type: "email" }] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Posts = InferredTypes["Posts"];
export type PostsRecord = Posts & XataRecord;

export type Subscribers = InferredTypes["Subscribers"];
export type SubscribersRecord = Subscribers & XataRecord;

export type DatabaseSchema = {
  Posts: PostsRecord;
  Subscribers: SubscribersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://ishaanbedi-in-mhq61u.us-east-1.xata.sh/db/ishaanbedi_in_posts",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
